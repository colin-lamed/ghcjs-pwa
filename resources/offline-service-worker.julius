var cacheName = '#{rawJS $ cacheName}';
var filesToCache = #{rawJS $ show filesToCache};

self.addEventListener('install', function(e) {
  console.log('[ServiceWorker] Install.');
  e.waitUntil(
    caches.open(cacheName).then(function(cache) {
      console.log('[ServiceWorker] Caching app shell...');
      return cache.addAll(filesToCache).then(function() {
        self.skipWaiting();
      });
    })
  );
});

self.addEventListener('activate', function(e) {
  console.log('[ServiceWorker] Activate event fired.');
  e.waitUntil(
    caches.keys().then(function(keyList) {
      return Promise.all(keyList.map(function(key) {
        if (key !== cacheName) {
          console.log('[ServiceWorker] Removing old cache...', key);
          return caches.delete(key);
        }
      }));
    })
  );
  return self.clients.claim();
});

self.addEventListener('fetch', function(e) {
  console.log('[ServiceWorker] Fetch event fired.', e.request.url);
  // cache key is not `e.request`, since cache.addAll took url only - which defaults the request.mode etc.
  // we need to preserve the defaults in the cache lookup
  var cacheKey = new Request(e.request.url);
  e.respondWith(
    caches.match(cacheKey).then(function(response) {
      if (response) {
        console.log('[ServiceWorker] Retrieving ' + e.request.url + ' from cache...');
        return response;
      }
      console.log('[ServiceWorker] Retrieving ' + e.request.url + ' from URL...');
      return fetch(e.request).catch(function(e){
        console.log('[ServiceWorker] Fetch request ' + e.request.url + ' failed!');
      });
    })
  );
});
